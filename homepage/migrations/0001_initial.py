# Generated by Django 2.1.3 on 2019-02-03 02:42

import ckeditor_uploader.fields
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Account',
            fields=[
                ('accountid', models.AutoField(db_column='AccountID', primary_key=True, serialize=False)),
                ('username', models.CharField(blank=True, db_column='Username', max_length=250, null=True)),
                ('password', models.CharField(blank=True, db_column='Password', max_length=250, null=True)),
                ('createdate', models.DateTimeField(blank=True, db_column='CreateDate', null=True)),
                ('editdate', models.DateTimeField(blank=True, db_column='EditDate', null=True)),
                ('avatar', models.CharField(blank=True, db_column='Avatar', max_length=250, null=True)),
                ('resetcode', models.CharField(blank=True, db_column='ResetCode', max_length=250, null=True)),
                ('isenable', models.IntegerField(blank=True, db_column='IsEnable', null=True)),
                ('note', models.CharField(blank=True, db_column='Note', max_length=250, null=True)),
            ],
            options={
                'db_table': 'account',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='AccountType',
            fields=[
                ('accounttypeid', models.AutoField(db_column='AccountTypeID', primary_key=True, serialize=False)),
                ('accounttypename', models.CharField(blank=True, db_column='AccountTypeName', max_length=250, null=True)),
                ('createdate', models.DateTimeField(blank=True, db_column='CreateDate', null=True)),
                ('editdate', models.DateTimeField(blank=True, db_column='EditDate', null=True)),
                ('isenable', models.IntegerField(blank=True, db_column='IsEnable', null=True)),
                ('note', models.CharField(blank=True, db_column='Note', max_length=250, null=True)),
            ],
            options={
                'db_table': 'accounttype',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Activity',
            fields=[
                ('activityid', models.AutoField(db_column='ActivityID', primary_key=True, serialize=False)),
                ('activityname', models.CharField(blank=True, db_column='ActivityName', max_length=250, null=True)),
                ('createdate', models.DateTimeField(blank=True, db_column='CreateDate', null=True)),
                ('editdate', models.DateTimeField(blank=True, db_column='EditDate', null=True)),
                ('time', models.IntegerField(blank=True, db_column='Time', null=True)),
                ('isenable', models.IntegerField(blank=True, db_column='IsEnable', null=True)),
                ('description', ckeditor_uploader.fields.RichTextUploadingField(blank=True, db_column='Description', max_length=250, null=True)),
                ('content', ckeditor_uploader.fields.RichTextUploadingField(blank=True, db_column='Content', null=True)),
                ('link', models.CharField(blank=True, db_column='Link', max_length=250, null=True)),
                ('order', models.IntegerField(blank=True, db_column='Order', null=True)),
                ('note', models.CharField(blank=True, db_column='Note', max_length=250, null=True)),
                ('accountid', models.ForeignKey(blank=True, db_column='AccountID', null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='homepage.Account')),
            ],
            options={
                'db_table': 'activity',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='ActivityReply',
            fields=[
                ('activityreplyid', models.AutoField(db_column='ActivityReplyID', primary_key=True, serialize=False)),
                ('content', ckeditor_uploader.fields.RichTextUploadingField(blank=True, db_column='Content', null=True)),
                ('createdate', models.DateTimeField(blank=True, db_column='CreateDate', null=True)),
                ('editdate', models.DateTimeField(blank=True, db_column='EditDate', null=True)),
                ('rate', models.IntegerField(blank=True, db_column='Rate', null=True)),
                ('isenable', models.IntegerField(blank=True, db_column='IsEnable', null=True)),
                ('note', models.CharField(blank=True, db_column='Note', max_length=250, null=True)),
                ('activityid', models.ForeignKey(blank=True, db_column='ActivityID', null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='homepage.Activity')),
            ],
            options={
                'db_table': 'activityreply',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='ActivitySubmittion',
            fields=[
                ('activitysubmittionid', models.AutoField(db_column='ActivitySubmittionID', primary_key=True, serialize=False)),
                ('createdate', models.DateTimeField(blank=True, db_column='CreateDate', null=True)),
                ('editdate', models.DateTimeField(blank=True, db_column='EditDate', null=True)),
                ('link', models.CharField(blank=True, db_column='Link', max_length=199, null=True)),
                ('description', models.CharField(blank=True, db_column='Description', max_length=250, null=True)),
                ('content', ckeditor_uploader.fields.RichTextUploadingField(blank=True, db_column='Content', null=True)),
                ('isenable', models.IntegerField(blank=True, db_column='IsEnable', null=True)),
                ('note', models.CharField(blank=True, db_column='Note', max_length=250, null=True)),
                ('accountid', models.ForeignKey(blank=True, db_column='AccountID', null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='homepage.Account')),
                ('activityid', models.ForeignKey(blank=True, db_column='ActivityID', null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='homepage.Activity')),
            ],
            options={
                'db_table': 'activitysubmittion',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='ActivitySubmittionReply',
            fields=[
                ('activitysubmittionreplyid', models.AutoField(db_column='ActivitySubmittionReplyID', primary_key=True, serialize=False)),
                ('createdate', models.DateTimeField(blank=True, db_column='CreateDate', null=True)),
                ('editdate', models.DateTimeField(blank=True, db_column='EditDate', null=True)),
                ('content', ckeditor_uploader.fields.RichTextUploadingField(blank=True, db_column='Content', null=True)),
                ('isenable', models.IntegerField(blank=True, db_column='IsEnable', null=True)),
                ('note', models.CharField(blank=True, db_column='Note', max_length=250, null=True)),
                ('activitysubmittionid', models.ForeignKey(blank=True, db_column='ActivitySubmittionID', null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='homepage.ActivitySubmittion')),
            ],
            options={
                'db_table': 'activitysubmittionreply',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='ActivityType',
            fields=[
                ('activitytypeid', models.AutoField(db_column='ActivityTypeID', primary_key=True, serialize=False)),
                ('activitytypename', models.CharField(blank=True, db_column='ActivityTypeName', max_length=250, null=True)),
                ('createdate', models.DateTimeField(blank=True, db_column='CreateDate', null=True)),
                ('editdate', models.DateTimeField(blank=True, db_column='EditDate', null=True)),
                ('isenable', models.IntegerField(blank=True, db_column='IsEnable', null=True)),
                ('note', models.CharField(blank=True, db_column='Note', max_length=250, null=True)),
            ],
            options={
                'db_table': 'activitytype',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Chapter',
            fields=[
                ('chapterid', models.AutoField(db_column='ChapterID', primary_key=True, serialize=False)),
                ('chaptername', models.CharField(blank=True, db_column='ChapterName', max_length=250, null=True)),
                ('createdate', models.DateTimeField(blank=True, db_column='CreateDate', null=True)),
                ('editdate', models.DateTimeField(blank=True, db_column='EditDate', null=True)),
                ('isenable', models.IntegerField(blank=True, db_column='IsEnable', null=True)),
                ('description', models.CharField(blank=True, db_column='Description', max_length=250, null=True)),
                ('content', ckeditor_uploader.fields.RichTextUploadingField(blank=True, db_column='Content', null=True)),
                ('order', models.IntegerField(blank=True, db_column='Order', null=True)),
                ('note', models.CharField(blank=True, db_column='Note', max_length=250, null=True)),
                ('accountid', models.ForeignKey(blank=True, db_column='AccountID', null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='homepage.Account')),
            ],
            options={
                'db_table': 'chapter',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Chat',
            fields=[
                ('chatid', models.AutoField(db_column='ChatID', primary_key=True, serialize=False)),
                ('createdate', models.DateTimeField(blank=True, db_column='CreateDate', null=True)),
                ('content', models.CharField(blank=True, db_column='Content', max_length=250, null=True)),
                ('accountid', models.ForeignKey(blank=True, db_column='AccountID', null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='homepage.Account')),
            ],
            options={
                'db_table': 'chat',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='ChatRoom',
            fields=[
                ('chatroomid', models.AutoField(db_column='ChatRoomID', primary_key=True, serialize=False)),
                ('createdate', models.DateTimeField(blank=True, db_column='CreateDate', null=True)),
                ('accountid', models.ForeignKey(blank=True, db_column='AccountID', null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='homepage.Account')),
            ],
            options={
                'db_table': 'chatroom',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Competition',
            fields=[
                ('competitionid', models.AutoField(db_column='CompetitionID', primary_key=True, serialize=False)),
                ('competitionname', models.CharField(blank=True, db_column='CompetitionName', max_length=250, null=True)),
                ('description', models.CharField(blank=True, db_column='Description', max_length=250, null=True)),
                ('content', ckeditor_uploader.fields.RichTextUploadingField(blank=True, db_column='Content', null=True)),
                ('avatar', models.CharField(blank=True, db_column='Avatar', max_length=250, null=True)),
                ('createdate', models.DateTimeField(blank=True, db_column='CreateDate', null=True)),
                ('editdate', models.DateTimeField(blank=True, db_column='EditDate', null=True)),
                ('opendate', models.DateTimeField(blank=True, db_column='OpenDate', null=True)),
                ('enddate', models.DateTimeField(blank=True, db_column='EndDate', null=True)),
                ('viewcount', models.IntegerField(blank=True, db_column='ViewCount', null=True)),
                ('likecount', models.IntegerField(blank=True, db_column='LikeCount', null=True)),
                ('isenable', models.IntegerField(blank=True, db_column='IsEnable', null=True)),
                ('note', models.CharField(blank=True, db_column='Note', max_length=250, null=True)),
                ('accountid', models.ForeignKey(blank=True, db_column='AccountID', null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='homepage.Account')),
            ],
            options={
                'db_table': 'competition',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='CompetitionSubmittion',
            fields=[
                ('competitionsubmittionid', models.AutoField(db_column='CompetitionSubmittionID', primary_key=True, serialize=False)),
                ('createdate', models.DateTimeField(blank=True, db_column='CreateDate', null=True)),
                ('editdate', models.DateTimeField(blank=True, db_column='EditDate', null=True)),
                ('link', models.CharField(blank=True, db_column='Link', max_length=250, null=True)),
                ('description', models.CharField(blank=True, db_column='Description', max_length=250, null=True)),
                ('content', ckeditor_uploader.fields.RichTextUploadingField(blank=True, db_column='Content', null=True)),
                ('isenable', models.IntegerField(blank=True, db_column='IsEnable', null=True)),
                ('note', models.CharField(blank=True, db_column='Note', max_length=250, null=True)),
                ('accountid', models.ForeignKey(blank=True, db_column='AccountID', null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='homepage.Account')),
                ('competitionid', models.ForeignKey(blank=True, db_column='CompetitionID', null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='homepage.Competition')),
            ],
            options={
                'db_table': 'competitionsubmittion',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='CompetitionSubmittionLike',
            fields=[
                ('competitionsubmittionlikeid', models.AutoField(db_column='CompetitionSubmittionLikeID', primary_key=True, serialize=False)),
                ('status', models.IntegerField(db_column='Status')),
                ('isenable', models.IntegerField(db_column='IsEnable')),
                ('note', models.CharField(db_column='Note', max_length=250)),
                ('accountid', models.ForeignKey(blank=True, db_column='AccountID', null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='homepage.Account')),
                ('competitionsubmittionid', models.ForeignKey(blank=True, db_column='CompetitionSubmittionID', null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='homepage.CompetitionSubmittion')),
            ],
            options={
                'db_table': 'competitionsubmittionlike',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='CompetitionSubmittionReply',
            fields=[
                ('competitionsubmittionreplyid', models.AutoField(db_column='CompetitionSubmittionReplyID', primary_key=True, serialize=False)),
                ('content', ckeditor_uploader.fields.RichTextUploadingField(db_column='Content')),
                ('createdate', models.DateTimeField(db_column='CreateDate')),
                ('editdate', models.DateTimeField(db_column='EditDate')),
                ('isenable', models.IntegerField(db_column='IsEnable')),
                ('note', models.CharField(db_column='Note', max_length=250)),
                ('accountid', models.ForeignKey(blank=True, db_column='AccountID', null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='homepage.Account')),
                ('competitionsubmittionid', models.ForeignKey(blank=True, db_column='CompetitionSubmittionID', null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='homepage.CompetitionSubmittion')),
            ],
            options={
                'db_table': 'competitionsubmittionreply',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Contact',
            fields=[
                ('contactid', models.AutoField(db_column='ContactID', primary_key=True, serialize=False)),
                ('content', ckeditor_uploader.fields.RichTextUploadingField(blank=True, db_column='Content', null=True)),
                ('createdate', models.DateTimeField(blank=True, db_column='CreateDate', null=True)),
                ('note', models.CharField(blank=True, db_column='Note', max_length=250, null=True)),
                ('accountid', models.ForeignKey(blank=True, db_column='AccountID', null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='homepage.Account')),
            ],
            options={
                'db_table': 'contact',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Enrollment',
            fields=[
                ('enrollmentid', models.AutoField(db_column='EnrollmentID', primary_key=True, serialize=False)),
                ('createdate', models.DateTimeField(blank=True, db_column='CreateDate', null=True)),
                ('editdate', models.DateTimeField(blank=True, db_column='EditDate', null=True)),
                ('isenable', models.IntegerField(blank=True, db_column='IsEnable', null=True)),
                ('note', models.CharField(blank=True, db_column='Note', max_length=250, null=True)),
                ('accountid', models.ForeignKey(blank=True, db_column='AccountID', null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='homepage.Account')),
            ],
            options={
                'db_table': 'enrollment',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='EnviromentCate',
            fields=[
                ('enviromentcateid', models.AutoField(db_column='EnviromentCateID', primary_key=True, serialize=False)),
                ('enviromentcatename', models.CharField(blank=True, db_column='EnviromentCateName', max_length=250, null=True)),
                ('createdate', models.DateTimeField(blank=True, db_column='CreateDate', null=True)),
                ('editdate', models.DateTimeField(blank=True, db_column='EditDate', null=True)),
                ('isenable', models.IntegerField(blank=True, db_column='IsEnable', null=True)),
                ('note', models.CharField(blank=True, db_column='Note', max_length=250, null=True)),
            ],
            options={
                'db_table': 'enviromentcate',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='FastChat',
            fields=[
                ('fastchatid', models.AutoField(db_column='FastChatID', primary_key=True, serialize=False)),
                ('content', ckeditor_uploader.fields.RichTextUploadingField(blank=True, db_column='Content', null=True)),
                ('createdate', models.DateTimeField(blank=True, db_column='CreateDate', null=True)),
                ('isenable', models.IntegerField(blank=True, db_column='IsEnable', null=True)),
                ('note', models.CharField(blank=True, db_column='Note', max_length=250, null=True)),
                ('accountid', models.ForeignKey(blank=True, db_column='AccountID', null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='homepage.Account')),
            ],
            options={
                'db_table': 'fastchat',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Footer',
            fields=[
                ('footerid', models.AutoField(db_column='FooterID', primary_key=True, serialize=False)),
                ('footername', models.CharField(blank=True, db_column='FooterName', max_length=250, null=True)),
                ('content', ckeditor_uploader.fields.RichTextUploadingField(blank=True, db_column='Content', null=True)),
                ('link', models.CharField(blank=True, db_column='Link', max_length=250, null=True)),
                ('createdate', models.DateTimeField(blank=True, db_column='CreateDate', null=True)),
                ('editdate', models.DateTimeField(blank=True, db_column='EditDate', null=True)),
                ('isenable', models.IntegerField(blank=True, db_column='IsEnable', null=True)),
                ('image', models.CharField(blank=True, db_column='Image', max_length=250, null=True)),
                ('note', models.CharField(blank=True, db_column='Note', max_length=250, null=True)),
            ],
            options={
                'db_table': 'footer',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Forum',
            fields=[
                ('forumtopicid', models.AutoField(db_column='ForumTopicID', primary_key=True, serialize=False)),
                ('forumtopicname', models.CharField(blank=True, db_column='ForumTopicName', max_length=250, null=True)),
                ('description', models.CharField(blank=True, db_column='Description', max_length=250, null=True)),
                ('content', ckeditor_uploader.fields.RichTextUploadingField(blank=True, db_column='Content', null=True)),
                ('avatar', models.CharField(blank=True, db_column='Avatar', max_length=250, null=True)),
                ('createdate', models.DateTimeField(blank=True, db_column='CreateDate', null=True)),
                ('editdate', models.DateTimeField(blank=True, db_column='EditDate', null=True)),
                ('viewcount', models.IntegerField(blank=True, db_column='ViewCount', null=True)),
                ('likecount', models.IntegerField(blank=True, db_column='LikeCount', null=True)),
                ('isenable', models.IntegerField(blank=True, db_column='IsEnable', null=True)),
                ('note', models.CharField(blank=True, db_column='Note', max_length=250, null=True)),
                ('accountid', models.ForeignKey(blank=True, db_column='AccountID', null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='homepage.Account')),
                ('enviromentcateid', models.ForeignKey(blank=True, db_column='EnviromentCateID', null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='homepage.EnviromentCate')),
            ],
            options={
                'db_table': 'forum',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='ForumLike',
            fields=[
                ('forumlikeid', models.AutoField(db_column='ForumLikeID', primary_key=True, serialize=False)),
                ('status', models.IntegerField(db_column='Status')),
                ('isenable', models.IntegerField(db_column='IsEnable')),
                ('note', models.CharField(db_column='Note', max_length=250)),
                ('accountid', models.ForeignKey(blank=True, db_column='AccountID', null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='homepage.Account')),
                ('forumtopicid', models.ForeignKey(blank=True, db_column='ForumTopicID', null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='homepage.Forum')),
            ],
            options={
                'db_table': 'forumlike',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='ForumReply',
            fields=[
                ('forumreplyid', models.AutoField(db_column='ForumReplyID', primary_key=True, serialize=False)),
                ('content', ckeditor_uploader.fields.RichTextUploadingField(blank=True, db_column='Content', null=True)),
                ('createdate', models.DateTimeField(blank=True, db_column='CreateDate', null=True)),
                ('editdate', models.DateTimeField(blank=True, db_column='EditDate', null=True)),
                ('isenable', models.IntegerField(blank=True, db_column='IsEnable', null=True)),
                ('note', models.CharField(blank=True, db_column='Note', max_length=250, null=True)),
                ('accountid', models.ForeignKey(blank=True, db_column='AccountID', null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='homepage.Account')),
                ('forumtopicid', models.ForeignKey(blank=True, db_column='ForumTopicID', null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='homepage.Forum')),
            ],
            options={
                'db_table': 'forumreply',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Game',
            fields=[
                ('gameid', models.AutoField(db_column='GameID', primary_key=True, serialize=False)),
                ('gamename', models.CharField(blank=True, db_column='GameName', max_length=250, null=True)),
                ('description', models.CharField(blank=True, db_column='Description', max_length=250, null=True)),
                ('content', ckeditor_uploader.fields.RichTextUploadingField(blank=True, db_column='Content', null=True)),
                ('avatar', models.CharField(blank=True, db_column='Avatar', max_length=250, null=True)),
                ('createdate', models.DateTimeField(blank=True, db_column='CreateDate', null=True)),
                ('editdate', models.DateTimeField(blank=True, db_column='EditDate', null=True)),
                ('viewcount', models.IntegerField(blank=True, db_column='ViewCount', null=True)),
                ('link', models.CharField(blank=True, db_column='Link', max_length=250, null=True)),
                ('accountid', models.ForeignKey(blank=True, db_column='AccountID', null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='homepage.Account')),
            ],
            options={
                'db_table': 'game',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='GameRate',
            fields=[
                ('gamerateid', models.AutoField(db_column='GameRateID', primary_key=True, serialize=False)),
                ('rate', models.IntegerField(blank=True, db_column='Rate', null=True)),
                ('createdate', models.DateTimeField(blank=True, db_column='CreateDate', null=True)),
                ('editdate', models.DateTimeField(blank=True, db_column='EditDate', null=True)),
                ('accountid', models.ForeignKey(blank=True, db_column='AccountID', null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='homepage.Account')),
                ('gameid', models.ForeignKey(blank=True, db_column='GameID', null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='homepage.Game')),
            ],
            options={
                'db_table': 'gamerate',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='GameType',
            fields=[
                ('gametypeid', models.AutoField(db_column='GameTypeID', primary_key=True, serialize=False)),
                ('gametypename', models.CharField(blank=True, db_column='GameTypeName', max_length=250, null=True)),
                ('createdate', models.DateTimeField(blank=True, db_column='CreateDate', null=True)),
                ('editdate', models.DateTimeField(blank=True, db_column='EditDate', null=True)),
            ],
            options={
                'db_table': 'gametype',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Header',
            fields=[
                ('headerid', models.AutoField(db_column='HeaderID', primary_key=True, serialize=False)),
                ('headername', models.CharField(blank=True, db_column='HeaderName', max_length=250, null=True)),
                ('content', ckeditor_uploader.fields.RichTextUploadingField(blank=True, db_column='Content', null=True)),
                ('link', models.CharField(blank=True, db_column='Link', max_length=250, null=True)),
                ('createdate', models.DateTimeField(blank=True, db_column='CreateDate', null=True)),
                ('editdate', models.DateTimeField(blank=True, db_column='EditDate', null=True)),
                ('isenable', models.IntegerField(blank=True, db_column='IsEnable', null=True)),
                ('image', models.CharField(blank=True, db_column='Image', max_length=250, null=True)),
                ('note', models.CharField(blank=True, db_column='Note', max_length=250, null=True)),
            ],
            options={
                'db_table': 'header',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Home',
            fields=[
                ('homeid', models.AutoField(db_column='HomeID', primary_key=True, serialize=False)),
                ('homename', models.CharField(blank=True, db_column='HomeName', max_length=250, null=True)),
                ('content', ckeditor_uploader.fields.RichTextUploadingField(blank=True, db_column='Content', null=True)),
                ('link', models.CharField(blank=True, db_column='Link', max_length=250, null=True)),
                ('createdate', models.DateTimeField(blank=True, db_column='CreateDate', null=True)),
                ('editdate', models.DateTimeField(blank=True, db_column='EditDate', null=True)),
                ('isenable', models.IntegerField(blank=True, db_column='IsEnable', null=True)),
                ('image', models.CharField(blank=True, db_column='Image', max_length=250, null=True)),
                ('note', models.CharField(blank=True, db_column='Note', max_length=250, null=True)),
            ],
            options={
                'db_table': 'home',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Introduction',
            fields=[
                ('introductionid', models.AutoField(db_column='IntroductionID', primary_key=True, serialize=False)),
                ('introductionname', models.CharField(blank=True, db_column='IntroductionName', max_length=250, null=True)),
                ('content', ckeditor_uploader.fields.RichTextUploadingField(blank=True, db_column='Content', null=True)),
                ('link', models.CharField(blank=True, db_column='Link', max_length=250, null=True)),
                ('createdate', models.DateTimeField(blank=True, db_column='CreateDate', null=True)),
                ('editdate', models.DateTimeField(blank=True, db_column='EditDate', null=True)),
                ('isenable', models.IntegerField(blank=True, db_column='IsEnable', null=True)),
                ('image', models.CharField(blank=True, db_column='Image', max_length=250, null=True)),
                ('note', models.CharField(blank=True, db_column='Note', max_length=250, null=True)),
            ],
            options={
                'db_table': 'introduction',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Item',
            fields=[
                ('itemid', models.AutoField(db_column='ItemID', primary_key=True, serialize=False)),
                ('itemname', models.CharField(blank=True, db_column='ItemName', max_length=250, null=True)),
                ('createdate', models.DateTimeField(blank=True, db_column='CreateDate', null=True)),
                ('editdate', models.DateTimeField(blank=True, db_column='EditDate', null=True)),
                ('isenable', models.IntegerField(blank=True, db_column='IsEnable', null=True)),
                ('description', models.CharField(blank=True, db_column='Description', max_length=250, null=True)),
                ('content', ckeditor_uploader.fields.RichTextUploadingField(blank=True, db_column='Content', null=True)),
                ('order', models.IntegerField(blank=True, db_column='Order', null=True)),
                ('note', models.CharField(blank=True, db_column='Note', max_length=250, null=True)),
                ('accountid', models.ForeignKey(blank=True, db_column='AccountID', null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='homepage.Account')),
            ],
            options={
                'db_table': 'item',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Lesson',
            fields=[
                ('lessonid', models.AutoField(db_column='LessonID', primary_key=True, serialize=False)),
                ('lessonname', models.CharField(blank=True, db_column='LessonName', max_length=250, null=True)),
                ('createdate', models.DateTimeField(blank=True, db_column='CreateDate', null=True)),
                ('editdate', models.DateTimeField(blank=True, db_column='EditDate', null=True)),
                ('isenable', models.IntegerField(blank=True, db_column='IsEnable', null=True)),
                ('description', models.CharField(blank=True, db_column='Description', max_length=250, null=True)),
                ('content', ckeditor_uploader.fields.RichTextUploadingField(blank=True, db_column='Content', null=True)),
                ('order', models.IntegerField(blank=True, db_column='Order', null=True)),
                ('note', models.CharField(blank=True, db_column='Note', max_length=250, null=True)),
                ('accountid', models.ForeignKey(blank=True, db_column='AccountID', null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='homepage.Account')),
                ('chapterid', models.ForeignKey(blank=True, db_column='ChapterID', null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='homepage.Chapter')),
            ],
            options={
                'db_table': 'lesson',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='LessonReply',
            fields=[
                ('lessonreplyid', models.AutoField(db_column='LessonReplyID', primary_key=True, serialize=False)),
                ('content', ckeditor_uploader.fields.RichTextUploadingField(blank=True, db_column='Content', null=True)),
                ('createdate', models.DateTimeField(blank=True, db_column='CreateDate', null=True)),
                ('editdate', models.DateTimeField(blank=True, db_column='EditDate', null=True)),
                ('isenable', models.IntegerField(blank=True, db_column='IsEnable', null=True)),
                ('note', models.CharField(blank=True, db_column='Note', max_length=250, null=True)),
                ('enrollmentid', models.ForeignKey(blank=True, db_column='EnrollmentID', null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='homepage.Enrollment')),
                ('lessonid', models.ForeignKey(blank=True, db_column='LessonID', null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='homepage.Lesson')),
            ],
            options={
                'db_table': 'lessonreply',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='News',
            fields=[
                ('newsid', models.AutoField(db_column='NewsID', primary_key=True, serialize=False)),
                ('newsname', models.CharField(blank=True, db_column='NewsName', max_length=250, null=True)),
                ('avatar', models.CharField(blank=True, db_column='Avatar', max_length=250, null=True)),
                ('description', models.CharField(blank=True, db_column='Description', max_length=250, null=True)),
                ('content', ckeditor_uploader.fields.RichTextUploadingField(blank=True, db_column='Content', null=True)),
                ('createdate', models.DateTimeField(blank=True, db_column='CreateDate', null=True)),
                ('editdate', models.DateTimeField(blank=True, db_column='EditDate', null=True)),
                ('isenable', models.IntegerField(blank=True, db_column='IsEnable', null=True)),
                ('note', models.CharField(blank=True, db_column='Note', max_length=250, null=True)),
                ('accountid', models.ForeignKey(blank=True, db_column='AccountID', null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='homepage.Account')),
                ('enviromentcateid', models.ForeignKey(blank=True, db_column='EnviromentCateID', null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='homepage.EnviromentCate')),
            ],
            options={
                'db_table': 'news',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='NewsReply',
            fields=[
                ('newsreplyid', models.AutoField(db_column='NewsReplyID', primary_key=True, serialize=False)),
                ('content', ckeditor_uploader.fields.RichTextUploadingField(blank=True, db_column='Content', null=True)),
                ('createdate', models.DateTimeField(blank=True, db_column='CreateDate', null=True)),
                ('editdate', models.DateTimeField(blank=True, db_column='EditDate', null=True)),
                ('isenable', models.IntegerField(blank=True, db_column='IsEnable', null=True)),
                ('note', models.CharField(blank=True, db_column='Note', max_length=250, null=True)),
                ('accountid', models.ForeignKey(blank=True, db_column='AccountID', null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='homepage.Account')),
                ('newsid', models.ForeignKey(blank=True, db_column='NewsID', null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='homepage.News')),
            ],
            options={
                'db_table': 'newsreply',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Online',
            fields=[
                ('onlineid', models.AutoField(db_column='OnlineID', primary_key=True, serialize=False)),
                ('isonline', models.IntegerField(blank=True, db_column='Isonline', null=True)),
                ('accountid', models.ForeignKey(blank=True, db_column='AccountID', null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='homepage.Account')),
            ],
            options={
                'db_table': 'online',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='ProjectShare',
            fields=[
                ('projectsharetopicid', models.AutoField(db_column='ProjectShareTopicID', primary_key=True, serialize=False)),
                ('projectsharetopicname', models.CharField(blank=True, db_column='ProjectShareTopicName', max_length=250, null=True)),
                ('description', models.CharField(blank=True, db_column='Description', max_length=250, null=True)),
                ('content', ckeditor_uploader.fields.RichTextUploadingField(blank=True, db_column='Content', null=True)),
                ('avatar', models.CharField(blank=True, db_column='Avatar', max_length=250, null=True)),
                ('createdate', models.DateTimeField(blank=True, db_column='CreateDate', null=True)),
                ('editdate', models.DateTimeField(blank=True, db_column='EditDate', null=True)),
                ('viewcount', models.IntegerField(blank=True, db_column='ViewCount', null=True)),
                ('likecount', models.IntegerField(blank=True, db_column='LikeCount', null=True)),
                ('link', models.CharField(blank=True, db_column='Link', max_length=250, null=True)),
                ('isenable', models.IntegerField(blank=True, db_column='IsEnable', null=True)),
                ('note', models.CharField(blank=True, db_column='Note', max_length=250, null=True)),
                ('accountid', models.ForeignKey(blank=True, db_column='AccountID', null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='homepage.Account')),
                ('enviromentcateid', models.ForeignKey(blank=True, db_column='EnviromentCateID', null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='homepage.EnviromentCate')),
            ],
            options={
                'db_table': 'projectshare',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='ProjectShareLike',
            fields=[
                ('projectsharelikeid', models.AutoField(db_column='ProjectShareLikeID', primary_key=True, serialize=False)),
                ('status', models.IntegerField(blank=True, db_column='Status', null=True)),
                ('isenable', models.IntegerField(blank=True, db_column='IsEnable', null=True)),
                ('note', models.CharField(blank=True, db_column='Note', max_length=250, null=True)),
                ('accountid', models.ForeignKey(blank=True, db_column='AccountID', null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='homepage.Account')),
                ('projectsharetopicid', models.ForeignKey(blank=True, db_column='ProjectShareTopicID', null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='homepage.ProjectShare')),
            ],
            options={
                'db_table': 'projectsharelike',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='ProjectShareReply',
            fields=[
                ('projectsharereplyid', models.AutoField(db_column='ProjectShareReplyID', primary_key=True, serialize=False)),
                ('content', ckeditor_uploader.fields.RichTextUploadingField(blank=True, db_column='Content', null=True)),
                ('createdate', models.DateTimeField(blank=True, db_column='CreateDate', null=True)),
                ('editdate', models.DateTimeField(blank=True, db_column='EditDate', null=True)),
                ('isenable', models.IntegerField(blank=True, db_column='IsEnable', null=True)),
                ('note', models.CharField(blank=True, db_column='Note', max_length=250, null=True)),
                ('accountid', models.ForeignKey(blank=True, db_column='AccountID', null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='homepage.Account')),
                ('projectsharetopicid', models.ForeignKey(blank=True, db_column='ProjectShareTopicID', null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='homepage.ProjectShare')),
            ],
            options={
                'db_table': 'projectsharereply',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='SlideRunBar',
            fields=[
                ('sliderunbarid', models.AutoField(db_column='SlideRunBarID', primary_key=True, serialize=False)),
                ('sliderunbarname', models.CharField(blank=True, db_column='SlideRunBarName', max_length=250, null=True)),
                ('content', ckeditor_uploader.fields.RichTextUploadingField(blank=True, db_column='Content', null=True)),
                ('link', models.CharField(blank=True, db_column='Link', max_length=250, null=True)),
                ('createdate', models.DateTimeField(blank=True, db_column='CreateDate', null=True)),
                ('editdate', models.DateTimeField(blank=True, db_column='EditDate', null=True)),
                ('isenable', models.IntegerField(blank=True, db_column='IsEnable', null=True)),
                ('image', models.CharField(blank=True, db_column='Image', max_length=250, null=True)),
                ('note', models.CharField(blank=True, db_column='Note', max_length=250, null=True)),
            ],
            options={
                'db_table': 'sliderunbar',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Subject',
            fields=[
                ('subjectid', models.AutoField(db_column='SubjectID', primary_key=True, serialize=False)),
                ('subjectname', models.CharField(blank=True, db_column='SubjectName', max_length=250, null=True)),
                ('createdate', models.DateTimeField(blank=True, db_column='CreateDate', null=True)),
                ('editdate', models.DateTimeField(blank=True, db_column='EditDate', null=True)),
                ('introvideo', models.CharField(blank=True, db_column='IntroVideo', max_length=250, null=True)),
                ('description', models.CharField(blank=True, db_column='Description', max_length=250, null=True)),
                ('content', ckeditor_uploader.fields.RichTextUploadingField(blank=True, db_column='Content', max_length=250, null=True)),
                ('isenable', models.IntegerField(blank=True, db_column='IsEnable', null=True)),
                ('avatar', models.CharField(blank=True, db_column='Avatar', max_length=250, null=True)),
                ('note', models.CharField(blank=True, db_column='Note', max_length=250, null=True)),
                ('accountid', models.ForeignKey(blank=True, db_column='AccountID', null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='homepage.Account')),
                ('enviromentcateid', models.ForeignKey(blank=True, db_column='EnviromentCateID', null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='homepage.EnviromentCate')),
            ],
            options={
                'db_table': 'subject',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='SubjectLike',
            fields=[
                ('subjectlikeid', models.AutoField(db_column='SubjectLikeID', primary_key=True, serialize=False)),
                ('status', models.IntegerField(db_column='Status')),
                ('isenable', models.IntegerField(db_column='IsEnable')),
                ('note', models.CharField(db_column='Note', max_length=250)),
                ('accountid', models.ForeignKey(blank=True, db_column='AccountID', null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='homepage.Account')),
                ('subjectid', models.ForeignKey(blank=True, db_column='SubjectID', null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='homepage.Subject')),
            ],
            options={
                'db_table': 'subjectlike',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='SubjectPart',
            fields=[
                ('subjectpartid', models.AutoField(db_column='SubjectPartID', primary_key=True, serialize=False)),
                ('subjectpartname', models.CharField(blank=True, db_column='SubjectPartName', max_length=250, null=True)),
                ('createdate', models.DateTimeField(blank=True, db_column='CreateDate', null=True)),
                ('editdate', models.DateTimeField(blank=True, db_column='EditDate', null=True)),
                ('description', models.CharField(blank=True, db_column='Description', max_length=250, null=True)),
                ('content', ckeditor_uploader.fields.RichTextUploadingField(blank=True, db_column='Content', null=True)),
                ('isenable', models.IntegerField(blank=True, db_column='IsEnable', null=True)),
                ('note', models.CharField(blank=True, db_column='Note', max_length=250, null=True)),
                ('avatar', models.CharField(blank=True, db_column='Avatar', max_length=250, null=True)),
                ('order', models.IntegerField(blank=True, db_column='Order', null=True)),
                ('accountid', models.ForeignKey(blank=True, db_column='AccountID', null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='homepage.Account')),
                ('subjectid', models.ForeignKey(blank=True, db_column='SubjectID', null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='homepage.Subject')),
            ],
            options={
                'db_table': 'subjectpart',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='SubjectTeacher',
            fields=[
                ('subjectteacherid', models.AutoField(db_column='SubjectTeacherID', primary_key=True, serialize=False)),
                ('createdate', models.DateTimeField(blank=True, db_column='CreateDate', null=True)),
                ('editdate', models.DateTimeField(blank=True, db_column='EditDate', null=True)),
                ('isenable', models.IntegerField(blank=True, db_column='IsEnable', null=True)),
                ('note', models.CharField(blank=True, db_column='Note', max_length=250, null=True)),
                ('accountid', models.ForeignKey(blank=True, db_column='AccountID', null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='homepage.Account')),
                ('subjectid', models.ForeignKey(blank=True, db_column='SubjectID', null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='homepage.Subject')),
            ],
            options={
                'db_table': 'subjectteacher',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Tracking',
            fields=[
                ('trackingid', models.AutoField(db_column='TrackingID', primary_key=True, serialize=False)),
                ('createdate', models.DateTimeField(blank=True, db_column='CreateDate', null=True)),
                ('editdate', models.DateTimeField(blank=True, db_column='EditDate', null=True)),
                ('isenable', models.IntegerField(blank=True, db_column='IsEnable', null=True)),
                ('note', models.CharField(blank=True, db_column='Note', max_length=250, null=True)),
                ('activityid', models.ForeignKey(blank=True, db_column='ActivityID', null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='homepage.Activity')),
                ('chapterid', models.ForeignKey(blank=True, db_column='ChapterID', null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='homepage.Chapter')),
                ('enrollmentid', models.ForeignKey(blank=True, db_column='EnrollmentID', null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='homepage.Enrollment')),
                ('itemid', models.ForeignKey(blank=True, db_column='ItemID', null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='homepage.Item')),
                ('lessonid', models.ForeignKey(blank=True, db_column='LessonID', null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='homepage.Lesson')),
                ('subjectid', models.ForeignKey(blank=True, db_column='SubjectID', null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='homepage.Subject')),
                ('subjectpartid', models.ForeignKey(blank=True, db_column='SubjectPartID', null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='homepage.SubjectPart')),
            ],
            options={
                'db_table': 'tracking',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='UserDetail',
            fields=[
                ('userdetailid', models.AutoField(db_column='UserDetailID', primary_key=True, serialize=False)),
                ('firstname', models.CharField(blank=True, db_column='FirstName', max_length=250, null=True)),
                ('lastname', models.CharField(blank=True, db_column='LastName', max_length=250, null=True)),
                ('birthday', models.DateField(blank=True, db_column='Birthday', null=True)),
                ('address', models.CharField(blank=True, db_column='Address', max_length=250, null=True)),
                ('phonenumber', models.CharField(blank=True, db_column='PhoneNumber', max_length=250, null=True)),
                ('email', models.CharField(blank=True, db_column='Email', max_length=250, null=True)),
                ('isenable', models.IntegerField(blank=True, db_column='IsEnable', null=True)),
                ('note', models.CharField(blank=True, db_column='Note', max_length=250, null=True)),
                ('accountid', models.ForeignKey(blank=True, db_column='AccountID', null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='homepage.Account')),
            ],
            options={
                'db_table': 'userdetail',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='UserRank',
            fields=[
                ('userrankid', models.AutoField(db_column='UserRankID', primary_key=True, serialize=False)),
                ('userrankname', models.CharField(blank=True, db_column='UserRankName', max_length=250, null=True)),
                ('icon', models.CharField(blank=True, db_column='Icon', max_length=250, null=True)),
                ('requiredlevel', models.IntegerField(blank=True, db_column='RequiredLevel', null=True)),
                ('createdate', models.DateTimeField(blank=True, db_column='CreateDate', null=True)),
                ('editdate', models.DateTimeField(blank=True, db_column='EditDate', null=True)),
                ('note', models.CharField(blank=True, db_column='Note', max_length=250, null=True)),
                ('enviromentcateid', models.ForeignKey(blank=True, db_column='EnviromentCateID', null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='homepage.EnviromentCate')),
            ],
            options={
                'db_table': 'userrank',
                'managed': True,
            },
        ),
        migrations.AddField(
            model_name='item',
            name='lessonid',
            field=models.ForeignKey(blank=True, db_column='LessonID', null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='homepage.Lesson'),
        ),
        migrations.AddField(
            model_name='game',
            name='gametypeid',
            field=models.ForeignKey(blank=True, db_column='GameTypeID', null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='homepage.GameType'),
        ),
        migrations.AddField(
            model_name='game',
            name='subjectid',
            field=models.ForeignKey(blank=True, db_column='SubjectID', null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='homepage.Subject'),
        ),
        migrations.AddField(
            model_name='forum',
            name='subjectid',
            field=models.ForeignKey(blank=True, db_column='SubjectID', null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='homepage.Subject'),
        ),
        migrations.AddField(
            model_name='enrollment',
            name='subjectid',
            field=models.ForeignKey(blank=True, db_column='SubjectID', null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='homepage.Subject'),
        ),
        migrations.AddField(
            model_name='competition',
            name='enviromentcateid',
            field=models.ForeignKey(blank=True, db_column='EnviromentCateID', null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='homepage.EnviromentCate'),
        ),
        migrations.AddField(
            model_name='chatroom',
            name='supportid',
            field=models.ForeignKey(blank=True, db_column='OnlineID', null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='homepage.Online'),
        ),
        migrations.AddField(
            model_name='chat',
            name='chatroomid',
            field=models.ForeignKey(blank=True, db_column='ChatRoomID', null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='homepage.ChatRoom'),
        ),
        migrations.AddField(
            model_name='chapter',
            name='subjectid',
            field=models.ForeignKey(blank=True, db_column='SubjectID', null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='homepage.Subject'),
        ),
        migrations.AddField(
            model_name='activitysubmittionreply',
            name='enrollmentid',
            field=models.ForeignKey(blank=True, db_column='EnrollmentID', null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='homepage.Enrollment'),
        ),
        migrations.AddField(
            model_name='activityreply',
            name='enrollmentid',
            field=models.ForeignKey(blank=True, db_column='EnrollmentID', null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='homepage.Enrollment'),
        ),
        migrations.AddField(
            model_name='activity',
            name='activitytypeid',
            field=models.ForeignKey(blank=True, db_column='ActivityTypeID', null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='homepage.ActivityType'),
        ),
        migrations.AddField(
            model_name='activity',
            name='itemid',
            field=models.ForeignKey(blank=True, db_column='ItemID', null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='homepage.Item'),
        ),
        migrations.AddField(
            model_name='activity',
            name='requiredactivityid',
            field=models.ForeignKey(blank=True, db_column='RequiredActivityID', null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='homepage.Activity'),
        ),
        migrations.AddField(
            model_name='account',
            name='accounttypeid',
            field=models.ForeignKey(blank=True, db_column='AccountTypeID', null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='homepage.AccountType'),
        ),
    ]
